{"version":3,"sources":["components/instructions/label.tsx","components/instructions/item.tsx","utils/board.ts","constants/constants.ts","components/instructions.tsx","constants/actions.ts","components/game/buttons.tsx","actions/game-actions.ts","components/pagination/page.tsx","components/pagination.tsx","components/modal.tsx","components/board/cell.tsx","components/board/row.tsx","components/board.tsx","utils/presets.ts","components/game/presets.jsx","components/draw.tsx","components/game/wrapper.tsx","utils/hooks.ts","components/game.tsx","components/size.tsx","reducers/game-reducer.ts","containers/game.tsx","index.tsx","records/game-records.ts"],"names":["Label","active","completed","children","className","Item","icon","undefined","hasCells","grid","some","row","cell","Instructions","store","init","length","draw","simulation","tick","UPDATE_GRID_SIZE","NEXT_TICK","CLEAR_GRID","RESET_GAME","LOAD_PRESET","DRAW_CELL","Buttons","empty","running","onToggle","dispatch","useDispatch","type","disabled","onClick","actions","clearGrid","resetGame","Page","page","onChange","Pagination","total","pages","useMemo","Array","fill","map","_","index","num","style","backgroundColor","display","Modal","open","title","confirm","onConfirm","onClose","tabIndex","role","BoardCell","content","BoardRow","Board","Presets","useState","setOpen","setPage","presets","preset","loadPreset","coords","evt","rect","size","clientX","clientY","max","touches","pageX","pageY","x","Math","floor","left","width","y","top","height","maxX","min","maxY","drawing","lastX","lastY","Draw","state","setState","onMove","useCallback","onStart","currentTarget","getBoundingClientRect","onEnd","useEffect","document","addEventListener","removeEventListener","move","onMouseDown","onMouseMove","onTouchStart","onTouchMove","onTouchEnd","Wrapper","drawCell","useSimulation","setRunning","previous","value","ref","useRef","current","usePrevious","onInterval","nextTick","timer","stable","prev","every","r","c","areEqual","setInterval","clearInterval","Game","options","label","Size","setSize","updateGridSize","createGrid","i","push","immer","action","Y","neighbours","reduce","iterate","maxWidth","createContainer","Component","gameReducer","node","getElementById","immerable","app","StrictMode","initialState","ReactDOM","render"],"mappings":"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","file":"static/js/main.cb282599.chunk.js","sourcesContent":["import type { FunctionComponent } from 'react';\n\n// --------------------------------------------------------------------\n\ninterface Props {\n  completed: boolean;\n  active: boolean;\n}\n\n// --------------------------------------------------------------------\n\nconst Label: FunctionComponent<Props> = ({ active, completed, children }) => {\n  if (completed === true) {\n    return (\n      <span>{children}</span>\n    );\n  }\n\n  if (active === true) {\n    return (\n      <strong>{children}</strong>\n    );\n  }\n\n  return (\n    <span className=\"text-muted\">{children}</span>\n  );\n};\n\nexport default Label;\n","import type { FunctionComponent } from 'react';\nimport Label from './label';\n\n// --------------------------------------------------------------------\n\ninterface Props {\n  completed: boolean;\n  active: boolean;\n}\n\n// --------------------------------------------------------------------\n\nconst Item: FunctionComponent<Props> = ({ active, completed, children }) => {\n  const icon = completed ? 'h5 text-secondary bi-check' : undefined;\n\n  return (\n    <li className=\"mb-1\">\n      <Label active={active} completed={completed}>\n        {children}\n      </Label>\n      <i className={icon} />\n    </li>\n  );\n};\n\nexport default Item;\n","import { DEAD, ALIVE } from '../constants/constants';\n\n// --------------------------------------------------------------------\n\nexport type Cell = 0 | 1;\nexport type Row = Array<Cell>;\nexport type Grid = Array<Row>;\n\n// --------------------------------------------------------------------\n\nexport function iterate(grid: Grid): Grid {\n  const Y = grid.length - 1;\n\n  return grid.map((row: Row, y: number): Row => {\n    return row.map((cell: Cell, x: number): Cell => {\n      /* eslint-disable computed-property-spacing, no-multi-spaces, indent */\n      const values = [\n        y > 0 ? grid[y - 1][x - 1] : undefined, // top left\n        y > 0 ? grid[y - 1][x    ] : undefined, // top\n        y > 0 ? grid[y - 1][x + 1] : undefined, // top right\n                grid[y    ][x - 1],             // left\n                grid[y    ][x + 1],             // right\n        y < Y ? grid[y + 1][x - 1] : undefined, // bottom left\n        y < Y ? grid[y + 1][x    ] : undefined, // bottom\n        y < Y ? grid[y + 1][x + 1] : undefined  // bottom right\n      ];\n      /* eslint-enable */\n\n      // contiamo quante celle vive abbiamo vicino a quella corrente\n\n      const neighbours = values.reduce<number>((total, value) => {\n        return value === ALIVE ? total + 1 : total;\n      }, 0);\n\n      // regole:\n      // 1) una cellula continua a vivere se intorno ad essa ci sono\n      //    o 2 o 3 cellule vive, altrimenti muore\n      // 3) se una cellula morta ha vicino 3 cellule vive, allora\n      //    torna in vita\n\n      if (cell === ALIVE) {\n        return neighbours === 2 || neighbours === 3 ? ALIVE : DEAD;\n      }\n\n      return neighbours === 3 ? ALIVE : DEAD;\n    });\n  });\n}\n\nexport function hasCells(grid: Grid): boolean {\n  return grid.some((row: Row) => row.some((cell: Cell) => cell === ALIVE));\n}\n\nexport function areEqual(prev: Grid, grid: Grid): boolean {\n  return grid.every((row, r) => row.every((cell, c) => cell === prev[r][c]));\n}\n","export const ALIVE = 1;\nexport const DEAD  = 0;\n","import Item from './instructions/item';\n\nimport { hasCells } from '../utils/board';\n\nimport type { State } from '../records/game-records';\nimport type { FunctionComponent } from 'react';\n\n// --------------------------------------------------------------------\n\ninterface Props {\n  store: State;\n}\n\n// --------------------------------------------------------------------\n\nconst Instructions: FunctionComponent<Props> = ({ store }) => {\n  const init       = store.grid.length === 0;\n  const grid       = store.grid.length !== 0;\n  const draw       = hasCells(store.grid);\n  const simulation = draw && store.tick !== 0;\n\n  return (\n    <ul className=\"mt-3 mt-md-5 mb-3\">\n      <Item active={init} completed={grid}>\n        Select the grid size\n      </Item>\n      <Item active={grid} completed={draw}>\n        Draw on the grid\n      </Item>\n      <Item active={draw} completed={simulation}>\n        Start the simulation\n      </Item>\n    </ul>\n  );\n};\n\nexport default Instructions;\n","export const UPDATE_GRID_SIZE = 'UPDATE_GRID_SIZE';\nexport const NEXT_TICK        = 'NEXT_TICK';\nexport const CLEAR_GRID       = 'CLEAR_GRID';\nexport const RESET_GAME       = 'RESET_GAME';\nexport const LOAD_PRESET      = 'LOAD_PRESET';\nexport const DRAW_CELL        = 'DRAW_CELL';\n","import { FunctionComponent, Fragment } from 'react';\n\nimport { resetGame, clearGrid } from '../../actions/game-actions';\nimport { useDispatch } from 'monarc';\n\n// --------------------------------------------------------------------\n\ninterface Props {\n  empty: boolean;\n  running: boolean;\n  onToggle: () => void;\n}\n\n// --------------------------------------------------------------------\n\nconst Buttons: FunctionComponent<Props> = ({ empty, running, onToggle }) => {\n  const dispatch = useDispatch();\n  const onClear  = () => {\n    clearGrid(dispatch);\n  };\n  const onReset = () => {\n    resetGame(dispatch);\n  };\n\n  if (running === true) {\n    return (\n      <button type=\"button\" className=\"btn btn-secondary\"\n        disabled={empty} onClick={onToggle}>\n        Stop simulation\n      </button>\n    );\n  }\n\n  return (\n    <Fragment>\n      <button type=\"button\" className=\"btn btn-secondary\"\n        disabled={empty} onClick={onToggle}>\n        Start game\n      </button>\n      <button type=\"button\" className=\"btn btn-secondary-outline ms-3\"\n        onClick={onClear}>\n        Clear\n      </button>\n      <button type=\"button\" className=\"btn btn-secondary-outline ms-3\"\n        onClick={onReset}>\n        Reset\n      </button>\n    </Fragment>\n  );\n};\n\nexport default Buttons;\n","import * as actions from '../constants/actions';\nimport type { Dispatch, Action } from 'monarc';\nimport type { Grid } from '../utils/board';\n\n// --------------------------------------------------------------------\n\nexport function updateGridSize(dispatch: Dispatch<Action>, size: number): void {\n  dispatch({ type: actions.UPDATE_GRID_SIZE, size });\n}\n\nexport function nextTick(dispatch: Dispatch<Action>): void {\n  dispatch({ type: actions.NEXT_TICK });\n}\n\nexport function clearGrid(dispatch: Dispatch<Action>): void {\n  dispatch({ type: actions.CLEAR_GRID });\n}\n\nexport function resetGame(dispatch: Dispatch<Action>): void {\n  dispatch({ type: actions.RESET_GAME });\n}\n\nexport function loadPreset(dispatch: Dispatch<Action>, preset: Grid): void {\n  dispatch({ type: actions.LOAD_PRESET, preset });\n}\n\nexport function drawCell(dispatch: Dispatch<Action>, x: number, y: number): void {\n  dispatch({ type: actions.DRAW_CELL, x, y });\n}\n","import { FunctionComponent } from 'react';\n\n// --------------------------------------------------------------------\n\ninterface Props {\n  page: number;\n  active: number;\n  onChange: (page: number) => void;\n}\n\n// --------------------------------------------------------------------\n\nconst Page: FunctionComponent<Props> = ({ page, active, onChange }) => {\n  const className = page === active ? 'page-item active' : 'page-item';\n  const onClick   = () => {\n    onChange(page);\n  };\n\n  return (\n    <li className={className}>\n      <button type=\"button\" className=\"page-link\" data-page={page}\n        onClick={onClick}>\n        {page + 1}\n      </button>\n    </li>\n  );\n};\n\nexport default Page;\n","import { FunctionComponent, useMemo } from 'react';\nimport Page from './pagination/page';\n\n// --------------------------------------------------------------------\n\ninterface Props {\n  page: number;\n  total: number;\n  onChange: (page: number) => void;\n}\n\n// --------------------------------------------------------------------\n\nconst Pagination: FunctionComponent<Props> = ({ page, total, onChange }) => {\n  const pages = useMemo(() => {\n    return new Array(total).fill(0).map((_, index) => index);\n  }, [ total ]);\n\n  return (\n    <nav className=\"text-center mt-3\">\n      <ul className=\"pagination justify-content-center mb-0\">\n        {pages.map((num) => (\n          <Page key={num} page={num} active={page} onChange={onChange} />\n        ))}\n      </ul>\n    </nav>\n  );\n};\n\nexport default Pagination;\n","import type { FunctionComponent } from 'react';\n\n// --------------------------------------------------------------------\n\nconst style = {\n  backgroundColor: 'rgba(0,0,0,.2)',\n  display:         'initial'\n};\n\ninterface Props {\n  open: boolean;\n  title: string;\n  confirm: string;\n  onClose: () => void;\n  onConfirm: () => void;\n}\n\n// --------------------------------------------------------------------\n\nconst Modal: FunctionComponent<Props> = ({\n  open, title, confirm, children, onConfirm, onClose\n}) => {\n  if (open === false) {\n    return null;\n  }\n\n  return (\n    <div className=\"modal show\" style={style} tabIndex={-1}\n      aria-modal=\"true\" role=\"dialog\">\n      <div className=\"modal-dialog modal-dialog-centered modal-dialog-scrollable\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\">{title}</h5>\n            <button type=\"button\" className=\"btn-close\"aria-label=\"Close\"\n              onClick={onClose} />\n          </div>\n          <div className=\"modal-body\">\n            {children}\n          </div>\n          <div className=\"modal-footer\">\n            <button type=\"button\" className=\"btn btn-secondary-outline\"\n              onClick={onClose}>\n              Close\n            </button>\n            <button type=\"button\" className=\"btn btn-secondary\"\n              onClick={onConfirm}>\n              {confirm}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import type { FunctionComponent } from 'react';\nimport type { Cell } from '../../utils/board';\n\nimport { ALIVE } from '../../constants/constants';\n\n// --------------------------------------------------------------------\n\nconst ICON_ALIVE = 'bi-circle-fill';\nconst ICON_DEAD  = 'bi-circle';\n\ninterface Props {\n  content: Cell;\n}\n\n// --------------------------------------------------------------------\n\nconst BoardCell: FunctionComponent<Props> = ({ content }) => {\n  const icon = content === ALIVE ? ICON_ALIVE : ICON_DEAD;\n\n  return (\n    <td>\n      <i className={icon} />\n    </td>\n  );\n};\n\nexport default BoardCell;\n","import type { Row, Cell } from '../../utils/board';\nimport type { FunctionComponent } from 'react';\nimport BoardCell from './cell';\n\n// --------------------------------------------------------------------\n\ninterface Props {\n  content: Row;\n}\n\n// --------------------------------------------------------------------\n\nconst BoardRow: FunctionComponent<Props> = ({ content }) => {\n  return (\n    <tr>\n      {content.map((cell: Cell, index: number) => (\n        <BoardCell key={index} content={cell} />\n      ))}\n    </tr>\n  );\n};\n\nexport default BoardRow;\n","import type { Grid, Row } from '../utils/board';\nimport type { FunctionComponent } from 'react';\nimport BoardRow from './board/row';\n\n// --------------------------------------------------------------------\n\ninterface Props {\n  content: Grid;\n}\n\n// --------------------------------------------------------------------\n\nconst Board: FunctionComponent<Props> = ({ content }) => {\n  return (\n    <table className=\"mx-auto\">\n      <tbody>\n        {content.map((row: Row, index: number) => (\n          <BoardRow key={index} content={row} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Board;\n","import { DEAD, ALIVE } from '../constants/constants';\n\nexport default [\n  // doppio blinker\n  [\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD ],\n    [ DEAD, DEAD, ALIVE, DEAD, DEAD, DEAD, DEAD, DEAD ],\n    [ DEAD, DEAD, ALIVE, DEAD, DEAD, DEAD, DEAD, DEAD ],\n    [ DEAD, DEAD, ALIVE, DEAD, DEAD, DEAD, DEAD, DEAD ],\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, ALIVE, DEAD ],\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, ALIVE, DEAD ],\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, ALIVE, DEAD ],\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD ]\n  ],\n\n  // toad\n  [\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD ],\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD ],\n    [ DEAD, DEAD, DEAD, ALIVE, ALIVE, ALIVE, DEAD, DEAD ],\n    [ DEAD, DEAD, ALIVE, ALIVE, ALIVE, DEAD, DEAD, DEAD ],\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD ],\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD ],\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD ],\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD ]\n  ],\n\n  // glider\n  [\n    [ DEAD, ALIVE, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD ],\n    [ DEAD, DEAD, ALIVE, DEAD, DEAD, DEAD, DEAD, DEAD ],\n    [ ALIVE, ALIVE, ALIVE, DEAD, DEAD, DEAD, DEAD, DEAD ],\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD ],\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD ],\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD ],\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD ],\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD ]\n  ],\n\n  // F-pentomino\n  [\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD ],\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD ],\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD ],\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD ],\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD ],\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, ALIVE, ALIVE, DEAD, DEAD, DEAD ],\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, ALIVE, ALIVE, DEAD, DEAD, DEAD, DEAD ],\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, ALIVE, DEAD, DEAD, DEAD, DEAD ],\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD ],\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD ],\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD ],\n    [ DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD, DEAD ]\n  ]\n];\n","import { FunctionComponent, Fragment, useState } from 'react';\nimport Pagination from '../pagination';\nimport Modal from '../modal';\nimport Board from '../board';\n\nimport { loadPreset } from '../../actions/game-actions';\nimport presets from '../../utils/presets';\nimport { useDispatch } from 'monarc';\n\n// --------------------------------------------------------------------\n\nconst Presets: FunctionComponent = () => {\n  const [ open, setOpen ] = useState(false);\n  const [ page, setPage ] = useState(0);\n\n  const onClose   = () => setOpen(false);\n  const onOpen    = () => setOpen(true);\n  const total     = presets.length;\n  const preset    = presets[page];\n  const dispatch  = useDispatch();\n  const onConfirm = () => {\n    loadPreset(dispatch, preset);\n    setOpen(false);\n  };\n\n  return (\n    <Fragment>\n      <button className=\"btn btn-link\" onClick={onOpen}>\n        Import preset\n      </button>\n      <Modal open={open} title=\"Import a preset\" confirm=\"import\"\n        onClose={onClose} onConfirm={onConfirm}>\n        <Board content={preset} />\n        <Pagination page={page} total={total} onChange={setPage} />\n      </Modal>\n    </Fragment>\n  );\n};\n\nexport default Presets;\n","import {\n  FunctionComponent, MouseEvent, TouchEvent,\n  useState, useEffect, useCallback\n} from 'react';\n\n// --------------------------------------------------------------------\n\ntype Evt = MouseEvent<HTMLElement> | TouchEvent<HTMLElement>;\n\ninterface Props {\n  onChange: (x: number, y: number) => void;\n  className?: string;\n  size: number;\n}\n\ninterface Rect {\n  top: number;\n  left: number;\n  width: number;\n  height:number;\n}\n\nfunction coords(evt: Evt, rect: Rect, size: number): [ number, number ] {\n  const max = size - 1;\n  let clientX;\n  let clientY;\n\n  if ('touches' in evt) {\n    clientX = evt.touches[0].pageX;\n    clientY = evt.touches[0].pageY;\n  } else {\n    clientX = evt.clientX;\n    clientY = evt.clientY;\n  }\n\n  const x = Math.floor((clientX - rect.left) * size / rect.width);\n  const y = Math.floor((clientY - rect.top) * size / rect.height);\n\n  // su mobile l'evento move ci segue anche al di fuori\n  // della griglia (al contrario che su desktop), quindi\n  // dobbiamo stare attenti a non \"sbordare\"\n\n  const maxX = Math.min(x, max);\n  const maxY = Math.min(y, max);\n\n  return [\n    Math.max(maxX, 0),\n    Math.max(maxY, 0)\n  ];\n}\n\nconst init = {\n  drawing: false,\n  left:    0,\n  top:     0,\n  width:   0,\n  height:  0,\n  lastX:   0,\n  lastY:   0\n};\n\n// --------------------------------------------------------------------\n\nconst Draw: FunctionComponent<Props> = ({ className, size, children, onChange }) => {\n  const [ state, setState ] = useState(init);\n\n  const onMove = useCallback((evt: Evt) => {\n    const [ x, y ] = coords(evt, state, size);\n\n    if (x !== state.lastX || y !== state.lastY) {\n      onChange(x, y);\n    }\n\n    setState({ ...state, lastX: x, lastY: y });\n  }, [ state, size, onChange ]);\n\n  const onStart = useCallback((evt: Evt) => {\n    const rect = evt.currentTarget.getBoundingClientRect();\n    let x = 0;\n    let y = 0;\n\n    if ('touches' in evt && evt.touches.length > 1) {\n      return;\n    }\n\n    if (evt.type === 'mousedown') {\n      [ x, y ] = coords(evt, rect, size);\n\n      onChange(x, y);\n    }\n\n    setState({\n      height:  rect.height,\n      width:   rect.width,\n      left:    rect.left,\n      top:     rect.top,\n      drawing: true,\n      lastX:   x,\n      lastY:   y\n    });\n  }, [ size, onChange ]);\n\n  const onEnd = useCallback(() => {\n    setState(init);\n  }, []);\n\n  // registriamo il mouseup su document, perché se rilasciamo\n  // il mouse al di fuori della griglia rimarremo \"bloccati\"\n  // in modalità disegno\n\n  useEffect(() => {\n    document.addEventListener('mouseup', onEnd);\n\n    return () => {\n      document.removeEventListener('mouseup', onEnd);\n    };\n  }, [ onEnd ]);\n\n  const move = state.drawing ? onMove : undefined;\n\n  return (\n    <div className={className} onMouseDown={onStart} onMouseMove={move}\n      onTouchStart={onStart} onTouchMove={onMove}\n      onTouchEnd={onEnd}>\n      {children}\n    </div>\n  );\n};\n\nexport default Draw;\n","import { FunctionComponent } from 'react';\nimport Board from '../board';\nimport Draw from '../draw';\n\nimport { drawCell } from '../../actions/game-actions';\nimport type { Grid } from '../../utils/board';\nimport { useDispatch } from 'monarc';\n\n// --------------------------------------------------------------------\n\ninterface Props {\n  running: boolean;\n  grid: Grid;\n}\n\n// --------------------------------------------------------------------\n\nconst Wrapper: FunctionComponent<Props> = ({ running, grid }) => {\n  const dispatch = useDispatch();\n  const size     = grid.length;\n\n  const onChange = (x: number, y: number) => {\n    drawCell(dispatch, x, y);\n  };\n\n  if (running === false) {\n    return (\n      <Draw className=\"d-inline-block mx-auto\"\n        size={size} onChange={onChange}>\n        <Board content={grid} />\n      </Draw>\n    );\n  }\n\n  return (\n    <div className=\"d-inline-block mx-auto\">\n      <Board content={grid} />\n    </div>\n  );\n};\n\nexport default Wrapper;\n","import { useCallback, useEffect, useState, useMemo, useRef } from 'react';\nimport { nextTick } from '../actions/game-actions';\nimport { Grid, hasCells, areEqual } from './board';\nimport { useDispatch } from 'monarc';\n\n// --------------------------------------------------------------------\n\ntype OnToggle = () => void;\n\n// --------------------------------------------------------------------\n\nexport function useRandomId(): string {\n  return useMemo(() => Math.random().toString(36).substring(2, 6) || '-', []);\n}\n\nexport function usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n\n  useEffect(() => {\n    ref.current = value;\n  });\n\n  return ref.current;\n}\n\nexport function useSimulation(grid: Grid, tick: number): [ boolean, OnToggle ] {\n  const [ running, setRunning ] = useState(false);\n\n  const previous = usePrevious(grid);\n  const dispatch = useDispatch();\n\n  const onInterval = useCallback(() => {\n    nextTick(dispatch);\n  }, [ dispatch ]);\n\n  useEffect(() => {\n    const stable    = previous && tick ? areEqual(previous, grid) : false;\n    const populated = hasCells(grid);\n\n    if (populated === false || stable === true) {\n      setRunning(false);\n      return undefined;\n    }\n\n    // XXX un'animazione troppo veloce rende l'esperienza\n    // abbastanza confusa. introduciamo quindi un ritardo\n    // artificiale (con un sistema abbastanza crudo, ma\n    // per il momento ci accontentiamo)\n\n    let timer: ReturnType<typeof setTimeout>;\n\n    if (running) {\n      timer = setInterval(onInterval, 250);\n\n      return () => {\n        clearInterval(timer);\n      };\n    }\n\n    return undefined;\n  }, [ previous, grid, tick, running, onInterval ]);\n\n  if (running === true) {\n    return [ true, () => setRunning(false) ];\n  }\n\n  return [ false, () => setRunning(true) ];\n}\n","import { FunctionComponent, Fragment } from 'react';\nimport Buttons from './game/buttons';\nimport Presets from './game/presets';\nimport Wrapper from './game/wrapper';\n\nimport type { State } from '../records/game-records';\nimport { useSimulation } from '../utils/hooks';\nimport { hasCells } from '../utils/board';\n\n// --------------------------------------------------------------------\n\ninterface Props {\n  store: State;\n}\n\n// --------------------------------------------------------------------\n\nconst Game: FunctionComponent<Props> = ({ store }) => {\n  const grid  = store.grid;\n  const tick  = store.tick;\n  const empty = hasCells(grid) === false;\n\n  const [ running, onToggle ] = useSimulation(grid, tick);\n\n  return (\n    <Fragment>\n      <div className=\"text-center\">\n        <p>\n          Tick nr. {store.tick}\n        </p>\n        <Wrapper running={running} grid={grid} />\n      </div>\n\n      <Presets />\n      <hr />\n\n      <Buttons empty={empty} running={running} onToggle={onToggle} />\n    </Fragment>\n  );\n};\n\nexport default Game;\n","import Select, { RSSValue, RSSOption } from 'react-smart-select';\nimport { FunctionComponent, Fragment, useState } from 'react';\nimport Presets from './game/presets';\n\nimport { updateGridSize } from '../actions/game-actions';\nimport { useDispatch } from 'monarc';\n\n// --------------------------------------------------------------------\n\nconst options = [\n  { label: '8 × 8', value: 8 },\n  { label: '12 × 12', value: 12 },\n  { label: '16 × 16', value: 16 }\n];\n\n// --------------------------------------------------------------------\n\nconst Size: FunctionComponent = () => {\n  const [ size, setSize ] = useState<RSSValue>();\n\n  const disabled = size === undefined;\n  const dispatch = useDispatch();\n  const onSubmit = () => {\n    const selected = size as RSSOption;\n\n    if (selected) {\n      updateGridSize(dispatch, selected.value);\n    }\n  };\n\n  return (\n    <Fragment>\n      <div className=\"text-center\">\n        <Select value={size} options={options} onChange={setSize} />\n      </div>\n\n      <Presets />\n      <hr />\n\n      <button type=\"button\" className=\"btn btn-secondary\"\n        disabled={disabled} onClick={onSubmit}>\n        Create grid\n      </button>\n    </Fragment>\n  );\n};\n\nexport default Size;\n","import { DEAD, ALIVE } from '../constants/constants';\nimport { State } from '../records/game-records';\nimport * as actions from '../constants/actions';\nimport { Grid, iterate } from '../utils/board';\nimport type { Action } from 'monarc';\nimport immer from 'immer';\n\n// --------------------------------------------------------------------\n\nfunction createGrid(state: State, size: number): void {\n  const grid: Grid = [];\n\n  for (let i = 0; i < size; i++) {\n    const empty = new Array(size);\n    const row   = empty.fill(DEAD);\n\n    grid.push(row);\n  }\n\n  state.grid = grid;\n}\n\nfunction nextTick(state: State): void {\n  state.grid  = iterate(state.grid);\n  state.tick += 1;\n}\n\nfunction resetGame(state: State): void {\n  state.grid = [];\n  state.tick = 0;\n}\n\nfunction loadPreset(state: State, action: Action): void {\n  state.grid = action.preset;\n  state.tick = 0;\n}\n\nfunction drawCell(state: State, action: Action): void {\n  const { x, y } = action;\n  const current  = state.grid;\n  const cell     = current[y][x];\n\n  state.grid[y][x] = cell === DEAD ? ALIVE : DEAD;\n  state.tick       = 0;\n}\n\n// --------------------------------------------------------------------\n\nexport default immer((state: State, action: Action): void => {\n  switch (action.type) {\n    case actions.UPDATE_GRID_SIZE:\n      createGrid(state, action.size);\n      break;\n\n    case actions.CLEAR_GRID:\n      createGrid(state, state.grid.length);\n      break;\n\n    case actions.NEXT_TICK:\n      nextTick(state);\n      break;\n\n    case actions.RESET_GAME:\n      resetGame(state);\n      break;\n\n    case actions.LOAD_PRESET:\n      loadPreset(state, action);\n      break;\n\n    case actions.DRAW_CELL:\n      drawCell(state, action);\n      break;\n\n    default:\n      break;\n  }\n});\n","import Instructions from '../components/instructions';\nimport Game from '../components/game';\nimport Size from '../components/size';\n\nimport gameReducer from '../reducers/game-reducer';\nimport { createContainer } from 'monarc';\n\nimport type { State } from '../records/game-records';\nimport type { FunctionComponent } from 'react';\n\n// --------------------------------------------------------------------\n\nconst style = {\n  maxWidth: '550px'\n};\n\ninterface Props {\n  store: State;\n}\n\n// --------------------------------------------------------------------\n\nconst GameContainer: FunctionComponent<Props> = ({ store }) => {\n  const Component = store.grid.length === 0 ? Size : Game;\n\n  return (\n    <div className=\"container shadow-2 mx-auto p-3 mt-3\" style={style}>\n      <div>\n        <h1 className=\"text-center\">Conway&apos;s Game of Life</h1>\n        <Instructions store={store} />\n        <Component store={store} />\n      </div>\n    </div>\n  );\n};\n\nexport default createContainer(GameContainer, gameReducer);\n","import 'mdb-react-ui-kit/dist/css/mdb.min.css';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\n\nimport { State } from './records/game-records';\nimport Game from './containers/game';\nimport ReactDOM from 'react-dom';\nimport React from 'react';\n\n// --------------------------------------------------------------------\n\nconst node  = document.getElementById('root');\nconst state = new State();\nconst app   = (\n  <React.StrictMode>\n    <Game initialState={state} />\n  </React.StrictMode>\n);\n\nReactDOM.render(app, node);\n","import type { Grid } from '../utils/board';\nimport { immerable } from 'immer';\n\n// --------------------------------------------------------------------\n\nexport class State {\n  [immerable] = true;\n\n  grid: Grid = [];\n\n  tick = 0;\n}\n"],"sourceRoot":""}